{"_id":{"createdBy":"hysk","createdDate":{"$date":"2021-02-21T16:40:00.000Z"},"editedDate":{"$date":"2021-02-21T16:41:00.000Z"},"expirationDate":null,"tiltle":"example article","keywords":["github","programming"],"category":["programming"],"preview":"It happens from time to time that we need more than one GitHub accounts. For example, we want to separate work projects from personal projects, or build a new online presence completely from scratch.\n\nThe issues that come with having multiple GitHub accounts is authentication and git profiles management. You want to make sure you are using the correct authentication so you can access the intended GitHub account. You also want to make sure when you publish your work, correct git profile is used for your commits. We don't want our personal accounts information to appear in our work repositories.\n\nHere, we introduce a way to set up our accounts and quickly swtich between them with only one command on MacOs.","contentRaw":"Managing Multiple GitHub Accounts on One Device - Quick and Simple!\nIt happens from time to time that we need more than one GitHub accounts. For example, we want to separate work projects from personal projects, or build a new online presence completely from scratch.\n\nThe issues that come with having multiple GitHub accounts is authentication and git profiles management. You want to make sure you are using the correct authentication so you can access the intended GitHub account. You also want to make sure when you publish your work, correct git profile is used for your commits. We don't want our personal accounts information to appear in our work repositories.\n\nHere, we introduce a way to set up our accounts and quickly swtich between them with only one command on MacOs.\n\n1. Generate credentials for your new GitHub acccounts.\nSuppose we have an existing account called work-account under email work-account@example.com, and we just created a new one called personal-account under email perosnal-account@example.com.\n\nGo ahead and create a set of SSH keys for your new account under the ~/.ssh/ directory\n\ncd ~/.ssh/\nssh-keygen -f id_rsa_personal -C 'personal-account@example.com'\n-f specifies the name of the SSH key pair. -C specifies the comment, which appears at the end of your public key and helps to identify which account this key is associated with.\n\nWhen prompted for passphrase, just press ENTER twice to leave it blank.\n\nExecuting this command will generate id_rsa_personal.pub and id_rsa_personal where id_rsa_personal is the private key that you should share with nobody.\n\nvi id_rsa_personal.pub\nNow copy the full content of your new public key, id_rsa_personal.pub, and add it to your new GitHub account.\n\nWe assume that you already have an existing set of keys for your work account and the public key has been added to your work GitHub account. Let's call them id_rsa_work.pub and id_rsa_work.\n\n2. Use ssh-add to manage your credentials\nI see lots of tutorials teach you to set up a ssh config file, where for both work and personal keys they are using the same HOST info. That doesn't work, at least not for me. I kept getting access denied when I switch accounts. I find it better and more clear to use ssh-add and manually tell the ssh-agent which private key I want to use now.\n\nFirst, check and see which key is being used right now.\n\nssh-add -l\nIf it's not the right key, remove it and add the correct key, say the personal key.\n\nssh-add remove\nssh-add ~/.ssh/id_rsa_personal\n3. Setting up the correct git profile\nThe second step makes sure your private key in use on your device matches the public key stored on the host, but it doesn't really tell git which git user profile you are using. If we were using our work GitHub account, work-account and work-account@example.com, when we switch to our personal repository, the git user profile will remain the same after we change the ssh credential. It technically allows you to commit to your personal repository with you work account. So you can end up seeing work-account and work-account@example.com in your personal repo commit history if you forget to update your git config.\n\nThere are two ways to do this.\n\nChange the local config for each individual repo to use the correct user profile. For example, to set up your user profile for you personal repo,\ncd your/personal/repo\nvi .git/config\nUpdate the user name and email for this repo\n\n[user]\n        name = personal-account\n        email = personal-account@example.com\nUpdate the global config each time you switch your account. For example, when we switch to our personal account,\ngit config --global user.name 'personal-account'\ngit config --global user.email 'personal-account@example.com'\nThey both have its disadvantage. For the local config method, it requires an operation for each repo. For the global config method, you need to update user profile each time you switch account.\n\nHowever, the global config method does have one advantage, which is it only needs to happen once when we switch accounts and it can always happen at the same time when we switch credential, which is a non-avoidable step anyway. Therefore, we can just set up an alias to execute both command at the same time.\n\n4. Cheat with aliases\nAs discussed above, we can set up one alias for each GitHub account. When we switch account, we use the correct alias to tell the ssh-agent which private key to use and the git what user profile to use.\n\nFor example, this is how I set up my aliases for work and personal accounts.\n\nvi ~/.bash_profile\nAdd the following section\n\n# set up git environment\nalias work-on=\"ssh-add -D && ssh-add ~/.ssh/id_rsa_work && git config --global user.name 'work-account' && git config --global user.email 'work-account@example.com'\"\nalias personal-on=\"ssh-add -D && ssh-add ~/.ssh/id_rsa_personal && git config --global user.name 'personal-account' && git config --global user.email 'personal-account@example.com'\"\nSave and compile it.\n\nsource ~/.bash_profile\nThere you go! If you want to use your work account, all you need to do is run the one command in your terminal\n\nwork-on\nIt'll automatically add the correct key and update your git user profile! Hope it helps!","contentHtml":"","contentMarkdown":"## Managing Multiple GitHub Accounts on One Device - Quick and Simple!\n\nIt happens from time to time that we need more than one GitHub accounts. \nFor example, we want to separate work projects from personal projects, or build a new online presence completely from scratch. \n\nThe issues that come with having multiple GitHub accounts is authentication and git profiles management. \nYou want to make sure you are using the correct authentication so you can access the intended GitHub account. \nYou also want to make sure when you publish your work, correct git profile is used for your commits. \nWe don't want our personal accounts information to appear in our work repositories.\n\nHere, we introduce a way to set up our accounts and quickly swtich between them with only one command on MacOs.\n\n### 1. Generate credentials for your new GitHub acccounts.\nSuppose we have an existing account called `work-account` under email `work-account@example.com`, \nand we just created a new one called `personal-account` under email `perosnal-account@example.com`.   \n\nGo ahead and create a set of SSH keys for your new account under the `~/.ssh/` directory\n```\ncd ~/.ssh/\nssh-keygen -f id_rsa_personal -C 'personal-account@example.com'\n```\n`-f` specifies the name of the SSH key pair. \n`-C` specifies the comment, which appears at the end of your public key and helps to identify which account this key is associated with.\n\nWhen prompted for passphrase, just press ENTER twice to leave it blank.   \n\nExecuting this command will generate `id_rsa_personal.pub` and `id_rsa_personal` where `id_rsa_personal` is the private key that you should share with **nobody**.\n\n```\nvi id_rsa_personal.pub\n```\nNow copy the full content of your new public key, `id_rsa_personal.pub`, and add it to your new GitHub account. \n\nWe assume that you already have an existing set of keys for your work account and the public key has been added to your work GitHub account. \nLet's call them `id_rsa_work.pub` and `id_rsa_work`.\n\n### 2. Use ssh-add to manage your credentials\nI see lots of tutorials teach you to set up a ssh config file, where for both work and personal keys they are using the same HOST info. \nThat doesn't work, at least not for me. \nI kept getting access denied when I switch accounts. \nI find it better and more clear to use `ssh-add` and manually tell the ssh-agent which private key I want to use now.\n\nFirst, check and see which key is being used right now. \n```\nssh-add -l\n```\nIf it's not the right key, remove it and add the correct key, say the personal key.\n```\nssh-add remove\nssh-add ~/.ssh/id_rsa_personal\n```\n\n### 3. Setting up the correct git profile \nThe second step makes sure your private key in use on your device matches the public key stored on the host, but it doesn't really tell git \nwhich git user profile you are using. \nIf we were using our work GitHub account, `work-account` and `work-account@example.com`, when we switch to our personal repository, the git user profile will \nremain the same after we change the ssh credential. It technically allows you to commit to your personal repository with you work account.\nSo you can end up seeing `work-account` and `work-account@example.com` in your personal repo commit history if you forget to update your git config. \n\nThere are two ways to do this.    \n1. Change the local config for each individual repo to use the correct user profile. For example, to set up your user profile for you personal repo,\n```\ncd your/personal/repo\nvi .git/config\n```\nUpdate the user name and email for this repo\n```\n[user]\n        name = personal-account\n        email = personal-account@example.com\n```\n2. Update the global config each time you switch your account. For example, when we switch to our personal account,\n```\ngit config --global user.name 'personal-account'\ngit config --global user.email 'personal-account@example.com'\n```\nThey both have its disadvantage. For the local config method, it requires an operation for each repo. \nFor the global config method, you need to update user profile each time you switch account.\n\nHowever, the global config method does have one advantage, which is it only needs to happen once when we switch accounts and \nit can always happen at the same time when we switch credential, which is a non-avoidable step anyway. Therefore, we can just \nset up an alias to execute both command at the same time.\n\n### 4. Cheat with aliases\nAs discussed above, we can set up one alias for each GitHub account. \nWhen we switch account, we use the correct alias to tell the ssh-agent which private key to use and the git what user profile to use.\n\nFor example, this is how I set up my aliases for work and personal accounts.\n```\nvi ~/.bash_profile\n```\nAdd the following section\n```\n# set up git environment\nalias work-on=\"ssh-add -D && ssh-add ~/.ssh/id_rsa_work && git config --global user.name 'work-account' && git config --global user.email 'work-account@example.com'\"\nalias personal-on=\"ssh-add -D && ssh-add ~/.ssh/id_rsa_personal && git config --global user.name 'personal-account' && git config --global user.email 'personal-account@example.com'\"\n```\nSave and compile it.\n```\nsource ~/.bash_profile\n```\n\nThere you go! \nIf you want to use your work account, all you need to do is run the one command in your terminal\n```\nwork-on\n```\nIt'll automatically add the correct key and update your git user profile! Hope it helps!","views":1,"status":"published","feedbacks":[{"ip":"0.0.0.0","id":"visitor","score":1}]}